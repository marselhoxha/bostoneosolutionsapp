{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomerService {\n  constructor(http) {\n    this.http = http;\n    this.server = 'http://localhost:8080';\n    this.customers$ = (page = 0) => this.http.get(`${this.server}/customer/list?page=${page}`).pipe(tap(console.log), catchError(this.handleError));\n    this.customer$ = customerId => this.http.get(`${this.server}/customer/get/${customerId}`).pipe(tap(console.log), catchError(this.handleError));\n    this.update$ = customer => this.http.put(`${this.server}/customer/update`, customer).pipe(tap(console.log), catchError(this.handleError));\n    this.searchCustomers$ = (name = '', page = 0) => this.http.get(`${this.server}/customer/search?name=${name}&page=${page}`).pipe(tap(console.log), catchError(this.handleError));\n    this.newCustomers$ = customer => this.http.post(`${this.server}/customer/create`, customer).pipe(tap(console.log), catchError(this.handleError));\n    this.newInvoice$ = () => this.http.get(`${this.server}/customer/invoice/new`).pipe(tap(console.log), catchError(this.handleError));\n    this.createInvoice$ = (customerId, invoice) => this.http.post(`${this.server}/customer/invoice/addtocustomer/${customerId}`, invoice).pipe(tap(console.log), catchError(this.handleError));\n    this.invoices$ = (page = 0) => this.http.get(`${this.server}/customer/invoice/list?page=${page}`).pipe(tap(console.log), catchError(this.handleError));\n    this.invoice$ = invoiceId => this.http.get(`${this.server}/customer/invoice/get/${invoiceId}`).pipe(tap(console.log), catchError(this.handleError));\n  }\n  handleError(error) {\n    console.log(error);\n    let errorMessage;\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `A client error occurred - ${error.error.message}`;\n    } else {\n      if (error.error.reason) {\n        errorMessage = error.error.reason;\n        console.log(errorMessage);\n      } else {\n        errorMessage = `An error occurred - Error status ${error.status}`;\n      }\n    }\n    return throwError(() => errorMessage);\n  }\n}\nCustomerService.ɵfac = function CustomerService_Factory(t) {\n  return new (t || CustomerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCustomerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomerService,\n  factory: CustomerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","throwError","CustomerService","constructor","http","page","get","server","pipe","console","log","handleError","customerId","customer","put","name","post","invoice","invoiceId","error","errorMessage","ErrorEvent","message","reason","status","factory","providedIn"],"sourceRoot":"","sources":["/Users/marsel/bostoneo/bostoneosolutionsapp/src/app/service/customer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, tap, throwError } from 'rxjs';\nimport { CustomHttpResponse, CustomerState, Page, Profile } from '../interface/appstates';\nimport { User } from '../interface/user';\nimport { Stats } from '../interface/stats';\nimport { Customer } from '../interface/customer';\nimport { Invoice } from '../interface/invoice';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerService {\n    private readonly server: string = 'http://localhost:8080';\n\n    constructor(private http: HttpClient) { }\n\n    customers$ = (page: number = 0) => <Observable<CustomHttpResponse<Page<Customer> & User & Stats>>>\n        this.http.get<CustomHttpResponse<Page<Customer> & User & Stats>>\n            (`${this.server}/customer/list?page=${page}`)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    customer$ = (customerId: number) => <Observable<CustomHttpResponse<CustomerState>>>\n        this.http.get<CustomHttpResponse<CustomerState>>\n            (`${this.server}/customer/get/${customerId}`)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    update$ = (customer: Customer) => <Observable<CustomHttpResponse<CustomerState>>>\n        this.http.put<CustomHttpResponse<CustomerState>>\n            (`${this.server}/customer/update`, customer)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    searchCustomers$ = (name: string = '', page: number = 0) => <Observable<CustomHttpResponse<Page<Customer> & User>>>\n        this.http.get<CustomHttpResponse<Page<Customer> & User>>\n            (`${this.server}/customer/search?name=${name}&page=${page}`)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    newCustomers$ = (customer: Customer) => <Observable<CustomHttpResponse<Customer & User>>>\n        this.http.post<CustomHttpResponse<Customer & User>>\n            (`${this.server}/customer/create`, customer)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    newInvoice$ = () => <Observable<CustomHttpResponse<Customer[] & User>>>\n        this.http.get<CustomHttpResponse<Customer[] & User>>\n            (`${this.server}/customer/invoice/new`)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    createInvoice$ = (customerId: number, invoice: Invoice) => <Observable<CustomHttpResponse<Customer[] & User>>>\n        this.http.post<CustomHttpResponse<Customer[] & User>>\n            (`${this.server}/customer/invoice/addtocustomer/${customerId}`, invoice)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    invoices$ = (page: number = 0) => <Observable<CustomHttpResponse<Page<Invoice> & User>>>\n        this.http.get<CustomHttpResponse<Page<Invoice> & User>>\n            (`${this.server}/customer/invoice/list?page=${page}`)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    invoice$ = (invoiceId: number) => <Observable<CustomHttpResponse<Customer & Invoice & User>>>\n        this.http.get<CustomHttpResponse<Customer & Invoice & User>>\n            (`${this.server}/customer/invoice/get/${invoiceId}`)\n            .pipe(\n                tap(console.log),\n                catchError(this.handleError)\n            );\n\n    private handleError(error: HttpErrorResponse): Observable<never> {\n        console.log(error);\n        let errorMessage: string;\n        if (error.error instanceof ErrorEvent) {\n            errorMessage = `A client error occurred - ${error.error.message}`;\n        } else {\n            if (error.error.reason) {\n                errorMessage = error.error.reason;\n                console.log(errorMessage);\n            } else {\n                errorMessage = `An error occurred - Error status ${error.status}`;\n            }\n        }\n        return throwError(() => errorMessage);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}