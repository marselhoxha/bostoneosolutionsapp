{"ast":null,"code":"import { BehaviorSubject, map, startWith, catchError, of, switchMap } from 'rxjs';\nimport { DataState } from 'src/app/enum/datastate.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/customer.service\";\nexport class CustomerComponent {\n  constructor(activatedRoute, customerService) {\n    this.activatedRoute = activatedRoute;\n    this.customerService = customerService;\n    this.dataSubject = new BehaviorSubject(null);\n    this.isLoadingSubject = new BehaviorSubject(false);\n    this.isLoading$ = this.isLoadingSubject.asObservable();\n    this.DataState = DataState;\n    this.CUSTOMER_ID = 'id';\n  }\n  ngOnInit() {\n    this.customerState$ = this.activatedRoute.paramMap.pipe(switchMap(params => {\n      return this.customerService.customer$(+params.get(this.CUSTOMER_ID)).pipe(map(response => {\n        console.log(response);\n        this.dataSubject.next(response);\n        return {\n          dataState: DataState.LOADED,\n          appData: response\n        };\n      }), startWith({\n        dataState: DataState.LOADING\n      }), catchError(error => {\n        return of({\n          dataState: DataState.ERROR,\n          error\n        });\n      }));\n    }));\n  }\n  updateCustomer(customerForm) {\n    this.isLoadingSubject.next(true);\n    this.customerState$ = this.customerService.update$(customerForm.value).pipe(map(response => {\n      console.log(response);\n      this.dataSubject.next(Object.assign(Object.assign({}, response), {\n        data: Object.assign(Object.assign({}, response.data), {\n          customer: Object.assign(Object.assign({}, response.data.customer), {\n            invoices: this.dataSubject.value.data.customer.invoices\n          })\n        })\n      }));\n      this.isLoadingSubject.next(false);\n      return {\n        dataState: DataState.LOADED,\n        appData: this.dataSubject.value\n      };\n    }), startWith({\n      dataState: DataState.LOADED,\n      appData: this.dataSubject.value\n    }), catchError(error => {\n      this.isLoadingSubject.next(false);\n      return of({\n        dataState: DataState.ERROR,\n        error\n      });\n    }));\n  }\n}\nCustomerComponent.ɵfac = function CustomerComponent_Factory(t) {\n  return new (t || CustomerComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CustomerService));\n};\nCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerComponent,\n  selectors: [[\"app-customer\"]],\n  decls: 2,\n  vars: 0,\n  template: function CustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"customer works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","startWith","catchError","of","switchMap","DataState","CustomerComponent","constructor","activatedRoute","customerService","isLoadingSubject","asObservable","ngOnInit","customerState$","paramMap","pipe","params","customer$","get","CUSTOMER_ID","response","console","log","dataSubject","next","dataState","LOADED","appData","LOADING","error","ERROR","updateCustomer","customerForm","update$","value","data","customer","invoices","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/marsel/bostoneo/bostoneosolutionsapp/src/app/component/customer/customer.component.ts","/Users/marsel/bostoneo/bostoneosolutionsapp/src/app/component/customer/customer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ParamMap } from '@angular/router';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, BehaviorSubject, map, startWith, catchError, of, switchMap } from 'rxjs';\nimport { DataState } from 'src/app/enum/datastate.enum';\nimport { CustomHttpResponse, CustomerState, Page } from 'src/app/interface/appstates';\nimport { State } from 'src/app/interface/state';\nimport { User } from 'src/app/interface/user';\nimport { CustomerService } from 'src/app/service/customer.service';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n  customerState$: Observable<State<CustomHttpResponse<CustomerState>>>;\n  private dataSubject = new BehaviorSubject<CustomHttpResponse<CustomerState>>(null);\n  private isLoadingSubject = new BehaviorSubject<boolean>(false);\n  isLoading$ = this.isLoadingSubject.asObservable();\n  readonly DataState = DataState;\n  private readonly CUSTOMER_ID: string = 'id';\n\n  constructor(private activatedRoute: ActivatedRoute, private customerService: CustomerService) { }\n\n  ngOnInit(): void {\n    this.customerState$ = this.activatedRoute.paramMap.pipe(\n      switchMap((params: ParamMap) => {\n        return this.customerService.customer$(+params.get(this.CUSTOMER_ID))\n          .pipe(\n            map(response => {\n              console.log(response);\n              this.dataSubject.next(response);\n              return { dataState: DataState.LOADED, appData: response };\n            }),\n            startWith({ dataState: DataState.LOADING }),\n            catchError((error: string) => {\n              return of({ dataState: DataState.ERROR, error })\n            })\n          )\n      })\n    );\n  }\n\n  updateCustomer(customerForm: NgForm): void {\n    this.isLoadingSubject.next(true);\n    this.customerState$ = this.customerService.update$(customerForm.value)\n      .pipe(\n        map(response => {\n          console.log(response);\n          this.dataSubject.next({ ...response, \n            data: { ...response.data, \n              customer: { ...response.data.customer, \n                invoices: this.dataSubject.value.data.customer.invoices }}});\n\n          this.isLoadingSubject.next(false);\n          return { dataState: DataState.LOADED, appData: this.dataSubject.value };\n        }),\n        startWith({ dataState: DataState.LOADED, appData: this.dataSubject.value }),\n        catchError((error: string) => {\n          this.isLoadingSubject.next(false);\n          return of({ dataState: DataState.ERROR, error })\n        })\n      )\n  }\n\n}\n","<p>customer works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}