{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationGuard {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  canActivate(routeSnapShot, state) {\n    return this.isAuthenticated();\n  }\n  isAuthenticated() {\n    if (this.userService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\nAuthenticationGuard.ɵfac = function AuthenticationGuard_Factory(t) {\n  return new (t || AuthenticationGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n};\nAuthenticationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationGuard,\n  factory: AuthenticationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,mBAAmB;EAG9BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CAACC,aAAqC,EAAEC,KAA0B;IAC3E,OAAO,IAAI,CAACC,eAAe,EAAE;EAC/B;EACSA,eAAe;IACnB,IAAG,IAAI,CAACL,WAAW,CAACK,eAAe,EAAE,EAAC;MACrC,OAAO,IAAI;KACX,MAAM;MACF,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEpB;;;mBAfSR,mBAAmB;AAAA;;SAAnBA,mBAAmB;EAAAS,SAAnBT,mBAAmB;EAAAU,YADP;AAAM","names":["AuthenticationGuard","constructor","userService","router","canActivate","routeSnapShot","state","isAuthenticated","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/marsel/bostoneo/bostoneosolutionsapp/src/app/guard/authentication.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { UserService } from '../service/user.service';\n\n\n@Injectable({providedIn: 'root'})\nexport class AuthenticationGuard {\n\n\n  constructor(private userService: UserService, private router: Router) { }\n\n  canActivate(routeSnapShot: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return this.isAuthenticated();\n  }\n   private isAuthenticated(): boolean {\n       if(this.userService.isAuthenticated()){\n        return true;\n       } else {\n            this.router.navigate(['/login']);\n            return false;\n       }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}