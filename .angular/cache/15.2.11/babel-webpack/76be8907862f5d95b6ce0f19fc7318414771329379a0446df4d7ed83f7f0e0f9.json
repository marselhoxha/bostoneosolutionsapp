{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Key } from '../enum/key.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.server = 'http://localhost:8080';\n    this.jwtHelper = new JwtHelperService();\n    this.login$ = (email, password) => this.http.post(`${this.server}/user/login`, {\n      email,\n      password\n    }).pipe(tap(console.log), catchError(this.handleError));\n    this.verifyCode$ = (email, code) => this.http.get(`${this.server}/user/verify/code/${email}/${code}`).pipe(tap(console.log), catchError(this.handleError));\n    this.profile$ = () => this.http.get(`${this.server}/user/profile`).pipe(tap(console.log), catchError(this.handleError));\n    this.update$ = user => this.http.patch(`${this.server}/user/update`, user).pipe(tap(console.log), catchError(this.handleError));\n    this.refreshToken$ = () => this.http.get(`${this.server}/user/refresh/token`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(Key.REFRESH_TOKEN)}`\n      }\n    }).pipe(tap(response => {\n      console.log(response);\n      localStorage.removeItem(Key.TOKEN);\n      localStorage.removeItem(Key.REFRESH_TOKEN);\n      localStorage.setItem(Key.TOKEN, response.data.access_token);\n      localStorage.setItem(Key.REFRESH_TOKEN, response.data.refresh_token);\n    }), catchError(this.handleError));\n    this.updatePassword$ = form => this.http.patch(`${this.server}/user/update/password`, form).pipe(tap(console.log), catchError(this.handleError));\n    this.updateRoles$ = roleName => this.http.patch(`${this.server}/user/update/role/${roleName}`, {}).pipe(tap(console.log), catchError(this.handleError));\n    this.updateAccountSettings$ = settings => this.http.patch(`${this.server}/user/update/settings`, settings).pipe(tap(console.log), catchError(this.handleError));\n    this.toggleMfa$ = () => this.http.patch(`${this.server}/user/togglemfa`, {}).pipe(tap(console.log), catchError(this.handleError));\n    this.updateImage$ = formData => this.http.patch(`${this.server}/user/update/image`, formData).pipe(tap(console.log), catchError(this.handleError));\n    this.isAuthenticated = () => this.jwtHelper.decodeToken(localStorage.getItem(Key.TOKEN)) && !this.jwtHelper.isTokenExpired(localStorage.getItem(Key.TOKEN)) ? true : false;\n  }\n  logOut() {\n    localStorage.removeItem(Key.TOKEN);\n    localStorage.removeItem(Key.REFRESH_TOKEN);\n  }\n  handleError(error) {\n    console.log(error);\n    let errorMessage;\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `A client error occurred - ${error.error.message}`;\n    } else {\n      if (error.error.reason) {\n        errorMessage = error.error.reason;\n        console.log(errorMessage);\n      } else {\n        errorMessage = `An error occurred - Error status ${error.status}`;\n      }\n    }\n    return throwError(errorMessage);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","tap","JwtHelperService","Key","UserService","constructor","http","email","password","post","server","pipe","console","log","handleError","code","get","user","patch","headers","Authorization","localStorage","getItem","REFRESH_TOKEN","response","removeItem","TOKEN","setItem","data","access_token","refresh_token","form","roleName","settings","formData","jwtHelper","decodeToken","isTokenExpired","logOut","error","errorMessage","ErrorEvent","message","reason","status","factory","providedIn"],"sourceRoot":"","sources":["/Users/marsel/bostoneo/bostoneosolutionsapp/src/app/service/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError,tap } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { CustomHttpResponse, Profile } from '../interface/appstates';\nimport { User } from '../interface/user';\nimport { Key } from '../enum/key.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  \n  private readonly server: string = 'http://localhost:8080';\n  private jwtHelper =  new JwtHelperService();\n\n  constructor(private http: HttpClient) { }\n\n  login$ = (email: string, password: string) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.post<CustomHttpResponse<Profile>>\n      (`${this.server}/user/login`, { email, password })\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  verifyCode$ = (email: string, code: string) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.get<CustomHttpResponse<Profile>>\n      (`${this.server}/user/verify/code/${email}/${code}`)\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  profile$ = () => <Observable<CustomHttpResponse<Profile>>>\n    this.http.get<CustomHttpResponse<Profile>>\n      (`${this.server}/user/profile`)\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  update$ = (user: User) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.patch<CustomHttpResponse<Profile>>\n      (`${this.server}/user/update`, user)\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  refreshToken$ = () => <Observable<CustomHttpResponse<Profile>>>\n    this.http.get<CustomHttpResponse<Profile>>\n      (`${this.server}/user/refresh/token`, { headers: { Authorization: `Bearer ${localStorage.getItem(Key.REFRESH_TOKEN)}` } })\n      .pipe(\n        tap(response => {\n          console.log(response);\n          localStorage.removeItem(Key.TOKEN);\n          localStorage.removeItem(Key.REFRESH_TOKEN);\n          localStorage.setItem(Key.TOKEN, response.data.access_token);\n          localStorage.setItem(Key.REFRESH_TOKEN, response.data.refresh_token);\n        }),\n        catchError(this.handleError)\n      );\n\n  updatePassword$ = (form: { currentPassword: string, newPassword: string, confirmNewPassword: string }) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.patch<CustomHttpResponse<Profile>>\n      (`${this.server}/user/update/password`, form)\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  updateRoles$ = (roleName: string) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.patch<CustomHttpResponse<Profile>>\n      (`${this.server}/user/update/role/${roleName}`, {})\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  updateAccountSettings$ = (settings: { enabled: boolean, notLocked: boolean }) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.patch<CustomHttpResponse<Profile>>\n      (`${this.server}/user/update/settings`, settings)\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n\n  toggleMfa$ = () => <Observable<CustomHttpResponse<Profile>>>\n    this.http.patch<CustomHttpResponse<Profile>>\n      (`${this.server}/user/togglemfa`, {})\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );  \n  \n  updateImage$ = (formData: FormData) => <Observable<CustomHttpResponse<Profile>>>\n    this.http.patch<CustomHttpResponse<Profile>>\n      (`${this.server}/user/update/image`, formData)\n      .pipe(\n        tap(console.log),\n        catchError(this.handleError)\n      );\n  \n  logOut() {\n    localStorage.removeItem(Key.TOKEN);\n    localStorage.removeItem(Key.REFRESH_TOKEN);\n  }    \n      \n  isAuthenticated = (): boolean => (this.jwtHelper.decodeToken<string>(localStorage.getItem(Key.TOKEN)) && !this.jwtHelper.isTokenExpired(localStorage.getItem(Key.TOKEN) )) ? true : false;   \n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    console.log(error);\n    let errorMessage: string;\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `A client error occurred - ${error.error.message}`;\n    } else {\n      if (error.error.reason) {\n        errorMessage = error.error.reason;\n        console.log(errorMessage);\n      } else {\n        errorMessage = `An error occurred - Error status ${error.status}`;\n      }\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}